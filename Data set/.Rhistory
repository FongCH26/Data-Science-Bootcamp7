head(diamonds)
ggplot(diamonds %>% sample_n(500),
aes(carat, price)) +
geom_point() +
geom_smooth()
install.packages(c("rpart.plot", "ranger", "pROC"))
library(catboost)
install.packages("catboost")
install.packages("caret")
library(pROC)
library(pROC)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(ranger)
library(catboost)
R.version()
version
print(x/y)
x <- 10
y <- 5
print(x/y)
x = 10
y = 5
print(y/x)
a = 10
b = 5
print(y/x)
print(c/d)
c -> 10
d -> 5
print(c/d)
10 -> c
5 -> d
print(c/d)
head(mtcars)
apply(mtcars,1,mean)
apply(mtcars,2,mean)
apply(mtcars,3,mean)
head(diamonds)
install.packages("ggplot2")
library(ggplot2)
View(diamonds)
View(diamonds)
library(tidyverse)
glimpse(diamonds)
install.packages("patchwork")
library(ggplot2)
library(tidyverse)
library(patchwork)
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
glimpse(diamonds)
ggplot(diamonds %>% sample_frac(0.5), aes(carat, price, col = clarity)) +
geom_point() +
theme_minimal() +
labs(
title = "Relationship Between Carat, Clarity and Price",
x = "Carat",
y = "Price",
caption = "Datasource: diamonds ggplot2"
) +
scale_color_brewer(type = "seq", palette = 8)
ggplot(diamonds %>% sample_frac(0.5), aes(clarity, carat, fill=clarity)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Diamonds' Carat and Clarity",
x = "Clarity",
y = "Carat",
caption = "Datasource: diamonds ggplot2"
)
ggplot(diamonds %>% sample_frac(0.5), aes(carat, price, col=color)) +
geom_point() +
theme_minimal() +
labs(
title = "Relationship Between Price, Carat and Color"
)
diamonds %>%
ggplot(aes(table,depth,col=cut)) +
geom_point(size = 1,alpha = 0.5) +
scale_color_brewer(type = "div", palette = 5) +
labs(
title = "Relationship On Diamonds and Cut Scale",
subtitle = "We can see that to get an ideal cut, the size of table and depth is centralize at a certain point.",
x = "Table",
y = "Depth",
caption = "Datasource: diamonds in ggplot2"
) +
theme_minimal()
h1 <- ggplot(diamonds %>% sample_n(1000),
aes(carat)) +
geom_histogram(bins = 20)
h2 <- ggplot(diamonds %>% sample_n(1000),
aes(cut)) +
geom_bar()
h3 <- ggplot(diamonds %>% sample_n(1000),
aes(color)) +
geom_bar()
h4 <- ggplot(diamonds %>% sample_n(1000),
aes(clarity)) +
geom_bar()
h5 <- ggplot(diamonds %>% sample_n(1000),
aes(depth)) +
geom_histogram(bins = 20)
h6 <- ggplot(diamonds %>% sample_n(1000),
aes(price)) +
geom_histogram(bins = 20)
h7 <- ggplot(diamonds %>% sample_n(1000),
aes(table)) +
geom_histogram(bins = 20)
(h1 + h3 + h4) / (h5 + h6 + h7) / h2
install.packages("patchwork")
library(ggplot2)
library(tidyverse)
library(patchwork)
library(ggplot2)
library(tidyverse)
library(patchwork)
setwd("~/")
setwd("D:/Data Science Couse/Task Camp")
install.packages("mlbench")
install.packages("caret")
library(mlbench)
library(caret)
install.packages("caret")
library(caret)
install.packages("mlbench")
install.packages("caret")
library(mlbench)
library(caret)
# Classifications Problem
data("PimaIndiansDiabetes")
df <- PimaIndiansDiabetes
head(df)
library(tidyverse)
glimpse(df)
# Prep Data and explore data
df %>%
count(diabetes) %>%
mutate(pct = n/sum(n))
mean(complete.cases(df))
# Train Model
train_test_split <- function(data,train_size=0.8){
set.seed(42)
n <- nrow(data)
id <-sample(1:n,size = n*train_size)
train_data <- data[id,]
test_data <- data[-id,]
return(list(train_data,test_data))
}
split_data <- train_test_split(df)
train_data <- split_data[[1]]
test_data <- split_data[[2]]
## Build knn model
crtl <- trainControl(method = "CV",
number = 5,
verboseIter = TRUE)
knn_model <- train(diabetes ~ .,
data = train_data,
method = "knn",
metric = "Accuracy",
trControl = crtl)
# Predict
p1 <- predict(knn_model,newdata = test_data)
mean(p1 == test_data$diabetes)
## Build Random forest model
set.seed(3)
rf_model <- train(diabetes ~ .,
data = train_data,
method = "rf",
metric = "Accuracy",
trControl = crtl)
install.packages("caret")
install.packages("caret")
View(PimaIndiansDiabetes)
library(caret)
install.packages("mlbench",dependencies = TRUE)
install.packages("caret",dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("caret")
